worker_processes  1;
master_process on;
error_log stderr notice;
daemon off;

events {
  worker_connections 2048;
}

include env.conf;

http {
		 client_body_buffer_size 1m;
  include mime.types;

lua_ssl_trusted_certificate /etc/pki/tls/cert.pem;
lua_ssl_verify_depth 3;

  lua_package_path ";;${prefix}lua/?.lua;";

  lua_code_cache on;

  lua_shared_dict crontab            20k;
lua_shared_dict autoswagger_hosts  10m;
lua_shared_dict collector          10m;
lua_shared_dict locks              100k;
lua_shared_dict statsd             10m;
lua_shared_dict buckets            10m;
lua_shared_dict queues             50m;
lua_shared_dict config_dict         1m;

init_by_lua '
require "resty.core"
inspect    = require "inspect"
randomseed = require "randomseed"
randomseed.seed()
';

init_worker_by_lua '
  local crontab = require "crontab";
  -- Safe (and preferred) when there is only one background worker
  -- If we include more than 1 background worker, we will have to rethink
  -- how crontab works anyway
  crontab.reset();
  ngx.log(ngx.ALERT, "initialized crontab");
';

resolver 8.8.8.8;

map $http_x_forwarded_proto $proxy_scheme {
  default "http";
  https "https";
  http "http";
}

# Main app on 7071
server {
  root app/;
  lua_need_request_body on;
  gzip on;

  listen 7071;

  include http_call.conf;

  location ~ ^/app/template/(.+)$ {
    try_files /vendor/angular-ui-bootstrap/template/$1 /template/$1 =404;
  }

  location /app {
    try_files $uri /index.html;
    expires modified 4h;
  }

  location @app {
    default_type text/html;
    lua_check_client_abort on;
    set $_url "";
    set $_operation "";
    set $_params "";
    content_by_lua_file "lua/apps/api.lua";
  }

  location / {
    rewrite  ^/$  $proxy_scheme://$http_host/app/ permanent;
    try_files /views$uri /vendor$uri /../public$uri $uri @app;
    header_filter_by_lua_file 'lua/apps/csrf.lua';
  }

  location ~ ^/(javascripts|stylesheets)/(.+)$ {
    try_files /assets/$1/$2 /assets/$1/compiled/$2 /assets/$2 =404;
  }
  location ~ ^/assets/(.+)$ {
    try_files /assets/compiled/$1 /assets/$1 /assets/stylesheets/compiled/$1 /assets/stylesheets/$1 $uri =404;
  }

  # curl -vv http://localhost:7071/api/jor/dump/export
  set_by_lua $slug_redis_dump_folder_path 'return os.getenv("SLUG_REDIS_DUMP_FOLDER_PATH")';
  location /redis/dump {
    internal;
    alias $slug_redis_dump_folder_path;
  }

  # curl -vv --data-binary @dump.rdb http://localhost:7071/redis/restore
  location /redis/restore {
    limit_except POST          { deny all; }

    client_body_in_file_only   on;
    client_body_temp_path      /tmp/;
    client_body_buffer_size    200k;
    client_max_body_size       500M;

    proxy_pass_request_headers on;
    proxy_set_header           X-FILE $request_body_file;
    proxy_set_body             off;
    proxy_redirect             off;
    proxy_pass                 http://localhost:7071/api/jor/dump/import;
  }

  location /redis/restore/rdb {
      limit_except POST          { deny all; }

      client_body_in_file_only   on;
      client_body_temp_path      /tmp/;
      client_body_buffer_size    200k;
      client_max_body_size       500M;

      proxy_pass_request_headers on;
      proxy_set_header           X-FILE $request_body_file;
      proxy_set_body             off;
      proxy_redirect             off;
      proxy_pass                 http://localhost:7071/api/jor/dump/import?file=dump.rdb;
    }

  location /redis/restore/aof {
      limit_except POST          { deny all; }

      client_body_in_file_only   on;
      client_body_temp_path      /tmp/;
      client_body_buffer_size    200k;
      client_max_body_size       500M;

      proxy_pass_request_headers on;
      proxy_set_header           X-FILE $request_body_file;
      proxy_set_body             off;
      proxy_redirect             off;
      proxy_pass                 http://localhost:7071/api/jor/dump/import?file=appendonly.aof;
    }
}

# proxy app on 10002
server {
  listen 10002;
  lua_code_cache on; # We need this on in order to have persistence via requires on init_by_lua
                     # The guardfile restarts nginx on any lua change anyway
  lua_need_request_body on;

  ignore_invalid_headers off;

  location /___pass {
    internal;

    rewrite_by_lua '
      local req = ngx.req

      if ngx.ctx.headers then
        for k,v in pairs(ngx.ctx.headers) do
          req.set_header(k, tostring(v))
        end
      end
    ';

    proxy_pass http://127.0.0.1:10002/___gunzip;

    proxy_http_version 1.1;
    proxy_set_header X-Brainslug $_endpoint_url$_path$is_args$args;
    proxy_set_header Host $http_host;
    proxy_set_header Connection $http_connection;

    proxy_redirect $_endpoint_url $proxy_scheme://$host;
    proxy_redirect $proxy_scheme://$_endpoint_host $proxy_scheme://$host;
    proxy_redirect ~*/(.*)$ $proxy_scheme://$host/$1;
  }

  location /___gunzip {
    gunzip on;
    proxy_ssl_server_name on;
    proxy_pass_request_headers on;
    proxy_http_version 1.1;
    proxy_set_header Connection $http_connection;
    proxy_set_header X-Brainslug "";

    proxy_pass $http_x_brainslug;
  }


  location / {
    set $_operation "";
    set $_params "";
    set $_endpoint_url "";
    set $_endpoint_host "";
    set $_path "";

    access_by_lua_file 'lua/apps/proxy/access.lua';
    content_by_lua_file 'lua/apps/proxy.lua';

  }

  include http_call.conf;
}


lua_shared_dict echo_storage 200m;

  # Echo app on 8081
  server {
    listen 8081;
    lua_need_request_body on;

    proxy_headers_hash_max_size 1024;
    proxy_headers_hash_bucket_size 128;


    gzip on;
    gzip_types application/json application/octet-stream;

    location / {
      content_by_lua '
        local cjson = require "cjson";

        ngx.header.content_type = "application/json"

        if ngx.req.get_method() == "HEAD" then
          ngx.header["Content-Length"] = 0
        else
          local json = cjson.encode({
            version = ngx.req.http_version(),
            method  = ngx.req.get_method(),
            path    = ngx.var.request_uri,
            args    = ngx.req.get_uri_args(),
            body    = ngx.req.get_body_data(),
            headers = ngx.req.get_headers()
          });
          ngx.header["Content-Length"] = #json + 1
          ngx.say(json)
        end
      ';
    }

    location ~* ^/gzip(?<original_uri>/.*)$ {
      proxy_http_version 1.1;
      proxy_pass http://127.0.0.1:8081$original_uri$is_args$args;

      rewrite_by_lua '
        ngx.req.set_header("Accept-Encoding", {"deflate", "gzip"})
      ';
    }

    location /wait/ {
      set_unescape_uri $time $arg_time;
      set_if_empty $time "0";

      content_by_lua '
        local cjson = require "cjson";

        local wait = tonumber(ngx.var.time);

        ngx.header.content_type = "application/json"

        ngx.sleep(wait)

        if ngx.req.get_method() == "HEAD" then
          ngx.header["Content-Length"] = 0
        else
          local json = cjson.encode({
            waited = wait,
            status = "ok"
          });
          ngx.header["Content-Length"] = #json + 1
          ngx.say(json)
        end
      ';
    }

    location /redirect/ {

      content_by_lua '
        ngx.status = 303
        ngx.header.Location = "/index"
      ';

    }

    location /file/ {
      set_unescape_uri $size $arg_size;
      set_unescape_uri $unit $arg_unit;
      set_if_empty $size "1";
      set_if_empty $unit "KB";

      content_by_lua '
        local ffi = require "ffi"
        local ffi_new = ffi.new
        local ffi_str = ffi.string
        local C = ffi.C

        ffi.cdef[[
          int RAND_bytes(unsigned char *buf, int num);
          int RAND_pseudo_bytes(unsigned char *buf, int num);
          ]]

        function bytes(len)
            local buf = ffi_new("char[?]", len)
            C.RAND_pseudo_bytes(buf,len)
            return ffi_str(buf, len)
        end

        local unit = ngx.var.unit:lower()
        local multiply = 1


        if unit == "kb" then
          multiply = 1024
        elseif unit == "mb" then
          multiply = 1024*1014
        else
          error("Unknown unit " .. unit)
        end

        local size = tonumber(ngx.var.size) * multiply

        ngx.header.content_type = "application/octet-stream"
        ngx.header["Content-Length"] = size

        local cache = ngx.shared.echo_storage:get(size)

        if cache then
          ngx.print(cache)
        else
          local output = bytes(size)
          ngx.shared.echo_storage:add(size, output)
          ngx.print(output)
        end
      ';
    }
  }

}
